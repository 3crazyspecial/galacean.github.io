(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{511:function(e,r,n){"use strict";n.r(r),r.default='import { OrbitControl } from "@oasis-engine/controls";\r\nimport {\r\n  AssetType,\r\n  BlendFactor,\r\n  BlendOperation,\r\n  Camera,\r\n  CullMode,\r\n  Entity,\r\n  Material,\r\n  RenderQueueType,\r\n  Shader,\r\n  Sprite,\r\n  SpriteRenderer,\r\n  SystemInfo,\r\n  Texture2D,\r\n  TextureWrapMode,\r\n  Vector2,\r\n  Vector3,\r\n  WebGLEngine\r\n} from "oasis-engine";\r\n\r\n// Create engine object\r\nconst engine = new WebGLEngine("o3-demo");\r\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\r\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\r\n\r\nconst scene = engine.sceneManager.activeScene;\r\nconst rootEntity = scene.createRootEntity();\r\n\r\n// Create camera\r\nconst cameraEntity = rootEntity.createChild("Camera");\r\ncameraEntity.transform.position = new Vector3(0, 0, 50);\r\ncameraEntity.addComponent(Camera);\r\ncameraEntity.addComponent(OrbitControl);\r\n\r\nengine.resourceManager\r\n  .load<Texture2D>({\r\n    url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*L2GNRLWn9EAAAAAAAAAAAAAAARQnAQ",\r\n    type: AssetType.Texture2D\r\n  })\r\n  .then((texture) => {\r\n    // Create origin sprite entity.\r\n    const texSize = new Vector2(texture.width, texture.height);\r\n    const spriteEntity = rootEntity.createChild("spriteBlur");\r\n\r\n    spriteEntity.addComponent(SpriteRenderer).sprite = new Sprite(engine, texture);\r\n    spriteEntity.transform.setScale(4, 4, 4);\r\n    // The blur algorithm will sample the edges of the texture.\r\n    // Set the clamp warp mode to avoid mis-sampling caused by repeate warp mode.\r\n    texture.wrapModeU = texture.wrapModeV = TextureWrapMode.Clamp;\r\n\r\n    // Display normal\r\n    addCustomMaterialSpriteEntity(spriteEntity, -22.5, texSize, 0.0);\r\n    // Display low blur\r\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), -7.5, texSize, 1.0);\r\n    // Display moderate blur\r\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), 7.5, texSize, 2.0);\r\n    // Display highly blur\r\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), 22.5, texSize, 3.0);\r\n  });\r\n\r\nengine.run();\r\n\r\nfunction addCustomMaterialSpriteEntity(entity: Entity, posX: number, texSize: Vector2, blurSize: number): void {\r\n  rootEntity.addChild(entity);\r\n  entity.transform.setPosition(posX, 0, 0);\r\n  // Create material\r\n  const material = new Material(engine, Shader.find("SpriteBlur"));\r\n  entity.getComponent(SpriteRenderer).setMaterial(material);\r\n  // Init state\r\n  const target = material.renderState.blendState.targetBlendState;\r\n  target.enabled = true;\r\n  target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\r\n  target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\r\n  target.sourceAlphaBlendFactor = BlendFactor.One;\r\n  target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\r\n  target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\r\n  material.renderState.depthState.writeEnabled = false;\r\n  material.renderQueueType = RenderQueueType.Transparent;\r\n  material.renderState.rasterState.cullMode = CullMode.Off;\r\n  // Set uniform\r\n  material.shaderData.setVector2("u_texSize", texSize);\r\n  material.shaderData.setFloat("u_blurSize", blurSize);\r\n}\r\n\r\n// Custom shader\r\nconst spriteVertShader = `\r\n  precision highp float;\r\n\r\n  uniform mat4 u_VPMat;\r\n\r\n  attribute vec3 POSITION;\r\n  attribute vec2 TEXCOORD_0;\r\n  attribute vec4 COLOR_0;\r\n\r\n  varying vec4 v_color;\r\n  varying vec2 v_uv;\r\n\r\n  void main()\r\n  {\r\n    gl_Position = u_VPMat * vec4(POSITION, 1.0);\r\n    v_color = COLOR_0;\r\n    v_uv = TEXCOORD_0;\r\n  }\r\n`;\r\n\r\nconst spriteFragmentShader = `\r\n  precision mediump float;\r\n  precision mediump int;\r\n\r\n  uniform sampler2D u_texture;\r\n  uniform float u_blurSize;\r\n  uniform vec2 u_texSize;\r\n\r\n  varying vec2 v_uv;\r\n  varying vec4 v_color;\r\n\r\n  float normpdf(float x, float sigma) {\r\n    return 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\r\n  }\r\n\r\n  void main() {\r\n    vec4 color = texture2D(u_texture, v_uv);\r\n    const int mSize = 11;\r\n    const int kSize = (mSize - 1) / 2;\r\n    float kernel[mSize];\r\n    vec3 final_colour = vec3(0.0);\r\n\r\n    // create the 1-D kernel\r\n    float sigma = 7.0;\r\n    float Z = 0.0;\r\n    for (int i = 0; i <= kSize; ++i) {\r\n      kernel[kSize+i] = kernel[kSize - i] = normpdf(float(i), sigma);\r\n    }\r\n\r\n    // get the normalization factor (as the gaussian has been clamped)\r\n    for (int i = 0; i < mSize; ++i) {\r\n      Z += kernel[i];\r\n    }\r\n\r\n    // read out the texels\r\n    float offsetX = u_blurSize / u_texSize.x;\r\n    float offsetY = u_blurSize / u_texSize.y;\r\n    vec2 uv;\r\n    for (int i = -kSize; i <= kSize; ++i) {\r\n      for (int j = -kSize; j <= kSize; ++j) {\r\n        uv = v_uv.xy + vec2(float(i) * offsetX, float(j) * offsetY);\r\n        final_colour += kernel[kSize + j] * kernel[kSize + i] * texture2D(u_texture, uv).rgb;\r\n      }\r\n    }\r\n\r\n    gl_FragColor = vec4(final_colour / (Z * Z), color.a) * v_color;\r\n  }\r\n`;\r\n\r\nShader.create("SpriteBlur", spriteVertShader, spriteFragmentShader);\r\n'}}]);