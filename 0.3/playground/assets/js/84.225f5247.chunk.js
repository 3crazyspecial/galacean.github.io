(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{513:function(n,t,r){"use strict";r.r(t),t.default='import { OrbitControl } from "@oasis-engine/controls";\r\nimport {\r\n  AmbientLight,\r\n  Camera,\r\n  Color,\r\n  DirectLight,\r\n  Entity,\r\n  GLTFResource,\r\n  Script,\r\n  SystemInfo,\r\n  WebGLEngine\r\n} from "oasis-engine";\r\n\r\ninit();\r\n\r\n/**\r\n * Init demo.\r\n */\r\nfunction init(): void {\r\n  // Create engine\r\n  const engine = new WebGLEngine("o3-demo");\r\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\r\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\r\n\r\n  // Create yellow duck\r\n  engine.resourceManager\r\n    .load<GLTFResource>("https://gw.alipayobjects.com/os/OasisHub/267000040/9994/%25E5%25BD%2592%25E6%25A1%25A3.gltf")\r\n    .then((gltf) => {\r\n      // Create root entity.\r\n      const rootEntity = engine.sceneManager.activeScene.createRootEntity();\r\n\r\n      // Create camera.\r\n      const cameraEntity = rootEntity.createChild("CameraEntity");\r\n      cameraEntity.transform.setPosition(0, 3, 9);\r\n      cameraEntity.addComponent(Camera);\r\n      cameraEntity.addComponent(OrbitControl);\r\n\r\n      // Create light.\r\n      const lightEntity = rootEntity.createChild("LightEntity");\r\n      const ambient = lightEntity.addComponent(AmbientLight);\r\n      const directLight = lightEntity.addComponent(DirectLight);\r\n      ambient.color = new Color(0.5, 0.5, 0.5);\r\n      directLight.color = new Color(0.5, 0.5, 0.5);\r\n\r\n      // Create three duck modles, set rotation and position.\r\n      const duck0 = gltf.defaultSceneRoot;\r\n      duck0.transform.rotate(0, -45, 0);\r\n\r\n      const duck1 = duck0.clone();\r\n      const duck2 = duck0.clone();\r\n      duck1.transform.setPosition(-3, 0, 0);\r\n      duck2.transform.setPosition(3, 0, 0);\r\n\r\n      // Create root entity and add transform script.\r\n      const script = rootEntity.addComponent(TransformScript);\r\n      script.duck0 = duck0;\r\n      script.duck1 = duck1;\r\n      script.duck2 = duck2;\r\n\r\n      // Add ducks to scene.\r\n      rootEntity.addChild(duck0);\r\n      rootEntity.addChild(duck1);\r\n      rootEntity.addChild(duck2);\r\n\r\n      //Run engine.\r\n      engine.run();\r\n    });\r\n}\r\n\r\n/**\r\n * Script for updating ducks position, rotation, and scale.\r\n */\r\nclass TransformScript extends Script {\r\n  /** Duck0. */\r\n  duck0: Entity;\r\n  /** Duck1. */\r\n  duck1: Entity;\r\n  /** Duck2. */\r\n  duck2: Entity;\r\n\r\n  private _totalTime: number = 0;\r\n\r\n  /**\r\n   * @override\r\n   * The main loop, called frame by frame.\r\n   * @param deltaTime - The deltaTime when the script update.\r\n   */\r\n  onUpdate(deltaTime: number): void {\r\n    this._totalTime += deltaTime;\r\n    const sinFactor = Math.sin(this._totalTime / 500);\r\n\r\n    // Update duck0\'s position.\r\n    const positionFactor = Math.max(sinFactor, 0);\r\n    this.duck0.transform.setPosition(0, positionFactor, 0);\r\n\r\n    // Update duck1\'s roatation.\r\n    const rotateFactor = this._totalTime * 0.1;\r\n    this.duck1.transform.setRotation(0, rotateFactor, 0);\r\n\r\n    // Update duck2\'s scale.\r\n    const scaleFactor = (sinFactor + 1.0) * 0.01;\r\n    this.duck2.transform.setScale(scaleFactor, scaleFactor, scaleFactor);\r\n  }\r\n}\r\n'}}]);