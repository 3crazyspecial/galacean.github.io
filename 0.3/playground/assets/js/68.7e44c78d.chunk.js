(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{497:function(n,r,e){"use strict";e.r(r),r.default='import {\r\n  AssetType,\r\n  Camera,\r\n  Color,\r\n  Engine,\r\n  Entity,\r\n  Material,\r\n  MeshRenderer,\r\n  ModelMesh,\r\n  PrimitiveMesh,\r\n  Script,\r\n  Shader,\r\n  SystemInfo,\r\n  Texture2D,\r\n  Vector3,\r\n  WebGLEngine\r\n} from "oasis-engine";\r\n\r\ninit();\r\n\r\nfunction init(): void {\r\n  // Create engine\r\n  const engine = new WebGLEngine("o3-demo");\r\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\r\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\r\n\r\n  // Create root entity\r\n  const rootEntity = engine.sceneManager.activeScene.createRootEntity();\r\n\r\n  // Create camera\r\n  const cameraEntity = rootEntity.createChild("Camera");\r\n  cameraEntity.transform.setPosition(0, 10, 10);\r\n  cameraEntity.transform.lookAt(new Vector3(0, 8, 0));\r\n  const camera = cameraEntity.addComponent(Camera);\r\n  camera.farClipPlane = 2000;\r\n  camera.fieldOfView = 55;\r\n\r\n  createPlane(engine, rootEntity);\r\n  engine.run();\r\n}\r\n\r\n/**\r\n * Create a plane as a child of entity.\r\n */\r\nfunction createPlane(engine: Engine, entity: Entity): void {\r\n  engine.resourceManager\r\n    .load<Texture2D>({\r\n      url: "https://gw.alipayobjects.com/mdn/rms_2e421e/afts/img/A*fRtNTKrsq3YAAAAAAAAAAAAAARQnAQ",\r\n      type: AssetType.Texture2D\r\n    })\r\n    .then((texture) => {\r\n      const planeEntity = entity.createChild("plane");\r\n      const meshRenderer = planeEntity.addComponent(MeshRenderer);\r\n      const material = new Material(engine, shader);\r\n\r\n      planeEntity.transform.setRotation(-90, 0, 0);\r\n      meshRenderer.mesh = PrimitiveMesh.createPlane(engine, 1245, 1245, 100, 100, false);\r\n      meshRenderer.setMaterial(material);\r\n\r\n      planeEntity.addComponent(PlaneAnimation);\r\n\r\n      const { shaderData } = material;\r\n      shaderData.setTexture("u_baseColor", texture);\r\n      shaderData.setColor("u_fogColor", new Color(0.25, 0.25, 0.25, 1));\r\n      shaderData.setFloat("u_fogDensity", 0.004);\r\n      shaderData.setColor("u_color", new Color(86 / 255, 182 / 255, 194 / 255, 1));\r\n    });\r\n}\r\n\r\n/**\r\n * Plane animation script.\r\n */\r\nclass PlaneAnimation extends Script {\r\n  private _planeMesh: ModelMesh;\r\n  private _initZ: number[];\r\n  private _counter: number = 0;\r\n\r\n  /**\r\n   * @override\r\n   * Called when be enabled first time, only once.\r\n   */\r\n  onAwake(): void {\r\n    const renderer = this.entity.getComponent(MeshRenderer);\r\n    const mesh = <ModelMesh>renderer.mesh;\r\n    const { vertexCount } = mesh;\r\n    const positions = mesh.getPositions();\r\n    const initZ = new Array<number>(vertexCount);\r\n\r\n    for (var i = 0; i < vertexCount; i++) {\r\n      const position = positions[i];\r\n      position.z += Math.random() * 10 - 10;\r\n      initZ[i] = position.z;\r\n    }\r\n    this._initZ = initZ;\r\n    this._planeMesh = mesh;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * The main loop, called frame by frame.\r\n   * @param deltaTime - The deltaTime when the script update.\r\n   */\r\n  onUpdate(deltaTime: number): void {\r\n    const mesh = this._planeMesh;\r\n    let { _counter: counter, _initZ: initZ } = this;\r\n    const positions = mesh.getPositions();\r\n    for (let i = 0, n = positions.length; i < n; i++) {\r\n      const position = positions[i];\r\n      position.z = Math.sin(i + counter * 0.00002) * (initZ[i] - initZ[i] * 0.6);\r\n      counter += 0.1;\r\n    }\r\n    mesh.setPositions(positions);\r\n    mesh.uploadData(false);\r\n    this._counter = counter;\r\n  }\r\n}\r\n\r\nconst shader = Shader.create(\r\n  "test-plane",\r\n  `uniform mat4 u_MVPMat;\r\n  attribute vec4 POSITION;\r\n  attribute vec2 TEXCOORD_0;\r\n  \r\n  uniform mat4 u_MVMat;\r\n  \r\n  varying vec2 v_uv;\r\n  varying vec3 v_position;\r\n  \r\n  void main() {\r\n    v_uv = TEXCOORD_0;\r\n    v_position = (u_MVMat * POSITION).xyz;\r\n    gl_Position = u_MVPMat * POSITION;\r\n  }`,\r\n\r\n  `\r\n  uniform sampler2D u_baseColor;\r\n  uniform vec4 u_color;\r\n  uniform vec4 u_fogColor;\r\n  uniform float u_fogDensity;\r\n  \r\n  varying vec2 v_uv;\r\n  varying vec3 v_position;\r\n  \r\n  void main() {\r\n    vec4 color = texture2D(u_baseColor, v_uv) * u_color;\r\n    float fogDistance = length(v_position);\r\n    float fogAmount = 1. - exp2(-u_fogDensity * u_fogDensity * fogDistance * fogDistance * 1.442695);\r\n    fogAmount = clamp(fogAmount, 0., 1.);\r\n    gl_FragColor = mix(color, u_fogColor, fogAmount); \r\n  }\r\n  `\r\n);\r\n'}}]);