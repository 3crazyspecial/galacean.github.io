(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{492:function(e,n,r){"use strict";r.r(n),n.default='import {\r\n  AmbientLight,\r\n  BlinnPhongMaterial,\r\n  Buffer,\r\n  BufferBindFlag,\r\n  BufferMesh,\r\n  BufferUsage,\r\n  Camera,\r\n  Color,\r\n  DirectLight,\r\n  Engine,\r\n  IndexFormat,\r\n  Mesh,\r\n  MeshRenderer,\r\n  SystemInfo,\r\n  Vector3,\r\n  VertexElement,\r\n  VertexElementFormat,\r\n  WebGLEngine\r\n} from "oasis-engine";\r\n\r\n// Create engine and get root entity.\r\nconst engine = new WebGLEngine("o3-demo");\r\nconst canvas = engine.canvas;\r\nconst rootEntity = engine.sceneManager.activeScene.createRootEntity("Root");\r\ncanvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\r\ncanvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\r\n\r\n// Create light.\r\nconst lightEntity = rootEntity.createChild("DirectLight");\r\nconst ambient = lightEntity.addComponent(AmbientLight);\r\nconst directLight = lightEntity.addComponent(DirectLight);\r\nambient.color = new Color(0.2, 0.2, 0.2);\r\ndirectLight.color = new Color(0.3, 0.4, 0.4);\r\n\r\n// Create camera.\r\nconst cameraEntity = rootEntity.createChild("Camera");\r\ncameraEntity.transform.setPosition(0, 6, 10);\r\ncameraEntity.transform.lookAt(new Vector3(0, 0, 0));\r\ncameraEntity.addComponent(Camera);\r\n\r\n// Create custom cube.\r\n// Use createCustomMesh() to create custom cube mesh.\r\nconst cubeEntity = rootEntity.createChild("Cube");\r\nconst cubeRenderer = cubeEntity.addComponent(MeshRenderer);\r\nconst cubeGeometry = createCustomMesh(engine, 1.0);\r\nconst material = new BlinnPhongMaterial(engine);\r\ncubeEntity.transform.rotate(0, 60, 0);\r\ncubeRenderer.mesh = cubeGeometry;\r\ncubeRenderer.setMaterial(material);\r\n\r\n// Run engine.\r\nengine.run();\r\n\r\n/**\r\n * Create cube geometry with custom BufferGeometry.\r\n * @param engine - Engine\r\n * @param size - Cube size\r\n * @returns Cube mesh\r\n */\r\nfunction createCustomMesh(engine: Engine, size: number): Mesh {\r\n  const geometry = new BufferMesh(engine, "CustomCubeGeometry");\r\n\r\n  // prettier-ignore\r\n  // Create vertices data.\r\n  const vertices: Float32Array = new Float32Array([\r\n    \t// Up\r\n    \t-size, size, -size, 0, 1, 0, size, size, -size, 0, 1, 0, size, size, size, 0, 1, 0, -size, size, size, 0, 1, 0,\r\n    \t// Down\r\n    \t-size, -size, -size, 0, -1, 0, size, -size, -size, 0, -1, 0, size, -size, size, 0, -1, 0, -size, -size, size, 0, -1, 0,\r\n    \t// Left\r\n    \t-size, size, -size, -1, 0, 0, -size, size, size, -1, 0, 0, -size, -size, size, -1, 0, 0, -size, -size, -size, -1, 0, 0,\r\n    \t// Right\r\n    \tsize, size, -size, 1, 0, 0, size, size, size, 1, 0, 0, size, -size, size, 1, 0, 0, size, -size, -size, 1, 0, 0,\r\n    \t// Front\r\n    \t-size, size, size, 0, 0, 1, size, size, size, 0, 0, 1, size, -size, size, 0, 0, 1, -size, -size, size, 0, 0, 1,\r\n    \t// Back\r\n    \t-size, size, -size, 0, 0, -1, size, size, -size, 0, 0, -1, size, -size, -size, 0, 0, -1, -size, -size, -size, 0, 0, -1]);\r\n\r\n  // prettier-ignore\r\n  // Create indices data.\r\n  const indices: Uint16Array = new Uint16Array([\r\n    \t// Up\r\n    \t0, 2, 1, 2, 0, 3,\r\n    \t// Down\r\n    \t4, 6, 7, 6, 4, 5,\r\n    \t// Left\r\n    \t8, 10, 9, 10, 8, 11,\r\n    \t// Right\r\n    \t12, 14, 15, 14, 12, 13,\r\n    \t// Front\r\n    \t16, 18, 17, 18, 16, 19,\r\n    \t// Back\r\n    \t20, 22, 23, 22, 20, 21]);\r\n\r\n  // Create gpu vertex buffer and index buffer.\r\n  const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static);\r\n  const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Static);\r\n\r\n  // Bind buffer\r\n  geometry.setVertexBufferBinding(vertexBuffer, 24);\r\n  geometry.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\r\n\r\n  // Add vertexElement\r\n  geometry.setVertexElements([\r\n    new VertexElement("POSITION", 0, VertexElementFormat.Vector3, 0),\r\n    new VertexElement("NORMAL", 12, VertexElementFormat.Vector3, 0)\r\n  ]);\r\n\r\n  // Add one sub geometry.\r\n  geometry.addSubMesh(0, indices.length);\r\n  return geometry;\r\n}\r\n'}}]);