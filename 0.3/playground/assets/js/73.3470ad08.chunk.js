(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{502:function(n,e,t){"use strict";t.r(e),e.default='import { OrbitControl } from "@oasis-engine/controls";\r\nimport {\r\n  AssetType,\r\n  BlinnPhongMaterial,\r\n  Camera,\r\n  DirectLight,\r\n  Entity,\r\n  Material,\r\n  MeshRenderer,\r\n  ModelMesh,\r\n  PrimitiveMesh,\r\n  Script,\r\n  SystemInfo,\r\n  Texture2D,\r\n  Vector3,\r\n  WebGLEngine\r\n} from "oasis-engine";\r\n\r\ninit();\r\n\r\nfunction init(): void {\r\n  // Create engine\r\n  const engine = new WebGLEngine("o3-demo");\r\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\r\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\r\n\r\n  // Create root entity\r\n  const rootEntity = engine.sceneManager.activeScene.createRootEntity();\r\n\r\n  // Create camera\r\n  const cameraEntity = rootEntity.createChild("Camera");\r\n  cameraEntity.transform.setPosition(0, 0, 20);\r\n  cameraEntity.addComponent(Camera);\r\n  cameraEntity.addComponent(OrbitControl);\r\n\r\n  // Create direct light\r\n  const lightEntity = rootEntity.createChild("DirectLight");\r\n  const light = lightEntity.addComponent(DirectLight);\r\n  light.intensity = 0.3;\r\n\r\n  engine.resourceManager\r\n    .load<Texture2D>({\r\n      url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*ArCHTbfVPXUAAAAAAAAAAAAAARQnAQ",\r\n      type: AssetType.Texture2D\r\n    })\r\n    .then((texture) => {\r\n      const distanceX = 2.5;\r\n      const distanceY = 2.5;\r\n      const position = new Vector3();\r\n\r\n      // Create material\r\n      const material = new BlinnPhongMaterial(engine);\r\n      material.emissiveTexture = texture;\r\n      material.emissiveColor.setValue(1, 1, 1, 1);\r\n\r\n      for (let i = 0; i < 3; i++) {\r\n        const posX = (i - 1) * distanceX;\r\n\r\n        // Create cuboid\r\n        position.setValue(posX, distanceY * 2.5, 0);\r\n        generatePrimitiveEntity(rootEntity, "cuboid", position, material, PrimitiveMesh.createCuboid(engine));\r\n\r\n        // Create sphere\r\n        position.setValue(posX, distanceY * 1.5, 0);\r\n        generatePrimitiveEntity(rootEntity, "sphere", position, material, PrimitiveMesh.createSphere(engine));\r\n\r\n        // Create plane\r\n        position.setValue(posX, distanceY * 0.5, 0);\r\n        generatePrimitiveEntity(rootEntity, "plane", position, material, PrimitiveMesh.createPlane(engine));\r\n\r\n        // Create cylinder\r\n        position.setValue(posX, -distanceY * 0.5, 0);\r\n        generatePrimitiveEntity(rootEntity, "cylinder", position, material, PrimitiveMesh.createCylinder(engine));\r\n\r\n        // Create cone\r\n        position.setValue(posX, -distanceY * 1.5, 0);\r\n        generatePrimitiveEntity(rootEntity, "cone", position, material, PrimitiveMesh.createCone(engine));\r\n\r\n        // Create turos\r\n        position.setValue(posX, -distanceY * 2.5, 0);\r\n        generatePrimitiveEntity(rootEntity, "torus", position, material, PrimitiveMesh.createTorus(engine));\r\n      }\r\n    });\r\n\r\n  // Run engine\r\n  engine.run();\r\n}\r\n\r\n/**\r\n * generate primitive mesh entity.\r\n */\r\nfunction generatePrimitiveEntity(\r\n  rootEntity: Entity,\r\n  name: string,\r\n  position: Vector3,\r\n  material: Material,\r\n  mesh: ModelMesh\r\n): Entity {\r\n  const entity = rootEntity.createChild(name);\r\n  entity.transform.setPosition(position.x, position.y, position.z);\r\n  entity.addComponent(RotateScript);\r\n  const renderer = entity.addComponent(MeshRenderer);\r\n  renderer.mesh = mesh;\r\n  renderer.setMaterial(material);\r\n\r\n  return entity;\r\n}\r\n\r\n/**\r\n * Script for rotate.\r\n */\r\nclass RotateScript extends Script {\r\n  /**\r\n   * @override\r\n   * The main loop, called frame by frame.\r\n   * @param deltaTime - The deltaTime when the script update.\r\n   */\r\n  onUpdate(deltaTime: number): void {\r\n    this.entity.transform.rotate(0.5, 0.6, 0);\r\n  }\r\n}\r\n'}}]);